stages:
  - build
  - test
  - clean
  - deploy


variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2375
#  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_CERTDIR: ""
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  PROJECT_NAME: $CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID

build_webpack:
  image: node:12.21.0-alpine3.10
  stage: build
  tags:
    - docker
  artifacts:
    paths:
      - front/public/static/build
  script:
    - cd front
    - npm ci
    - npm run build

build_django:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  rules:
    - changes:
        - Dockerfile
        - requirements.txt
        - bin/*
      when: always
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --rm --build-arg GITLAB_USER=gitlab-ci-token --build-arg GITLAB_PASS=${CI_JOB_TOKEN} -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE


test:
  stage: test
  image: docker/compose:alpine-1.28.6
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  artifacts:
    paths:
      - var/public
  script:
    - export PROJECT_DIR=$(pwd)
    - mkdir -p $PROJECT_DIR/var/
    - cp -rf $PROJECT_DIR/front/public $PROJECT_DIR/var/.
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -p $PROJECT_NAME -f docker-compose.ci.yml pull django
    - docker-compose -p $PROJECT_NAME -f docker-compose.ci.yml run --no-deps django python manage.py collectstatic --no-input
    - docker-compose -p $PROJECT_NAME -f docker-compose.ci.yml run django python manage.py test

clean_docker_compose:
  stage: clean
  image: docker/compose:alpine-1.29.2
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  when: always
  script:
    - docker-compose -p $PROJECT_NAME -f docker-compose.ci.yml down --rmi local

deploy_dev:
  stage: deploy
  image: "alpine"
  tags:
    - docker
  before_script:
    - apk update
    - apk --no-cache add openssh-client rsync
    - echo 'StrictHostKeyChecking no' > /etc/ssh/ssh_config
    - eval $(ssh-agent -s)
    - echo "${RB_DEV_SERVER_KEY}" | tr -d '\r' | ssh-add - > /dev/null
  when: manual
  script:
    - sh bin/deploy_dev.sh

deploy_master:
  stage: deploy
  image: "alpine"
  tags:
    - docker
  before_script:
    - apk update
    - apk --no-cache add openssh-client rsync
    - echo 'StrictHostKeyChecking no' > /etc/ssh/ssh_config
    - eval $(ssh-agent -s)
    - echo "${TECHDAYSRUSSIA_PROD_SERVER_KEY}" | tr -d '\r' | ssh-add - > /dev/null
  only:
    - master
  script:
    - sh ./bin/deploy_prod.sh
